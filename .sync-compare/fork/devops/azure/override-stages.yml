azure_containerize_helm:
  needs: []
  script:
      echo 'empty'
  only:
      - $DISABLED == 'true'

azure_test:
  needs: []
  extends: []
  script:
      echo 'empty'
  only:
      - $DISABLED == 'true'

azure_code_coverage:
  needs: []
  extends: []
  script:
      echo 'empty'
  only:
      - $DISABLED == 'true'

azure_test_py:
  needs: []
  extends: []
  script:
      echo 'empty'
  only:
      - $DISABLED == 'true'

azure_swagger_test:
  needs: []
  extends: []
  script:
      echo 'empty'
  only:
      - $DISABLED == 'true'

azure-publish:
  needs: []
  before_script:
      echo 'empty'
  script:
      echo 'empty'
  rules:
    - if: $DISABLED == 'true'
      when: never


azure_containerize:
  script:
    - echo "from override stages"
    - git clone ${AZURE_CONTAINERIZE_REPOSITORY}
    - cp ./service-base-image/java/Dockerfile ./Dockerfile
    - TARGET=$(find ./target -name '*.jar' |head -n 1)

    # Gitlab Container Registry
    - echo "Startup Jar is $TARGET"
    - |
      docker build \
      --build-arg JAR_FILE=$TARGET \
      --build-arg APPLICATIONINSIGHTS_INSTRUMENTATION_KEY=$AZURE_AD_APPINSIGHTS_KEY \
      --build-arg AZURE_MSI_ENABLED=false \
      --build-arg JAVA_OPTS="-DAPPINSIGHTS_LOGGING_ENABLED=true" \
      -t $CI_REGISTRY_IMAGE/$SHA_IMAGE .
    - docker push ${CI_REGISTRY_IMAGE}/$SHA_IMAGE
    - docker tag $CI_REGISTRY_IMAGE/$SHA_IMAGE $CI_REGISTRY_IMAGE/$LATEST_IMAGE
    - docker push ${CI_REGISTRY_IMAGE}/$LATEST_IMAGE

    # Azure Container Registry
    - az acr login -n $AZURE_REGISTRY
    - docker tag $CI_REGISTRY_IMAGE/$SHA_IMAGE ${AZURE_REGISTRY}.azurecr.io/$SHA_IMAGE
    - docker push ${AZURE_REGISTRY}.azurecr.io/$SHA_IMAGE
    - docker tag $CI_REGISTRY_IMAGE/$SHA_IMAGE ${AZURE_REGISTRY}.azurecr.io/$LATEST_IMAGE
    - docker push ${AZURE_REGISTRY}.azurecr.io/$LATEST_IMAGE

    - |
      if [ ! -z "$CI_COMMIT_TAG" ]; then
        docker tag $CI_REGISTRY_IMAGE/$SHA_IMAGE ${AZURE_REGISTRY}.azurecr.io/$RELEASE_IMAGE
        docker push ${AZURE_REGISTRY}.azurecr.io/$RELEASE_IMAGE
      fi

azure_deploy:
  script:
    # Install Service
    - cd devops/azure
    - echo "[WARN] No (HELM_CHART_OCI) var found, using /devops/azure to install"
    - >-
      helm upgrade -i schema-cleanup . -n osdu --wait --timeout 5m
      -f values.yaml
      --set secret.blob_account_key=$AZURE_DP_BLOB_KEY
      --set secret.blob_account_name=$AZURE_DP_BLOB_ACCOUNT_NAME
      --set secret.cosmos_host=$AZURE_DP_COSMOS_HOST
      --set secret.cosmos_key=$AZURE_DP_COSMOS_KEY
      --set secret.schema_query_params_id=$SCHEMA_KIND
      --set secret.system_blob_account_key=$SYSTEM_AZURE_BLOB_KEY
      --set secret.system_blob_account_name=$SYSTEM_AZURE_BLOB_ACCOUNT_NAME
      --set secret.system_cosmos_host=$SYSTEM_AZURE_COSMOS_HOST
      --set secret.system_cosmos_key=$SYSTEM_AZURE_COSMOS_KEY
      --set secret.system_schema_query_params_id=$SYSTEM_SCHEMA_KIND
    - POD_SERVICE_NAME=schema-cleanup
    - pod=$(kubectl get pod -n osdu|grep $POD_SERVICE_NAME |tail -1 |awk '{print $1}') || echo "[WARN] Not able to get pod but helm upgrade was successful"
    - status=$(kubectl wait -n osdu --for=condition=Ready pod/$pod --timeout=300s)
    - if [[ "$status" != *"met"* ]]; then echo "POD didn't start correctly" ; exit 1 ; fi
    - |
      echo "AZURE_REGISTRY_TOKEN=$(az acr login -n $AZURE_REGISTRY --expose-token --query 'accessToken' -otsv)" >> ${CI_PROJECT_DIR}/acr_tokens.env
      echo "DST_REGISTRY_TOKEN=$(az acr login -n msosdu --expose-token --query 'accessToken' -otsv)" >> ${CI_PROJECT_DIR}/acr_tokens.env
  artifacts:
    reports:
      dotenv: ${CI_PROJECT_DIR}/acr_tokens.env